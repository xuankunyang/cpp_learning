#include <iostream>
using namespace std;

int main()
{
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	//
	// 6.3 数据结构最后一节课
	// 关于有向图的强连通性
	// 选取起始顶点开始遍历，得到一组强联通分量，以及回退下标
	// 注意！需要将所有边反向，按照回退下标有大到小，再遍历一次，再在两次得到的强连通分量中对比，取大值
	// 
	// 注意讨论欧拉回路（or路径）之前，要先保证无向连通
	// 
	// AOV网：活动在点上 AOE网：活动在边上
	// 
	// AOV：按入度从小到大删除节点，并排序，得到该网的拓扑序列
	// 不是所有AOV都有拓扑序，出现环就出bug了
	// 这也引出了一个判断有向图中是否有环的算法
	// 计算出入度，用邻接矩阵更方便
	// 把入度为0的节点压到栈或者队列里
	// while不空：出栈（列），更新相邻点的入度与count
	// if count！=verts ->有回路
	// 
	// AOE：节点看作是里程碑，边上的权值可以看作持续天数
	// 起始顶点决定->入度为0
	// 最早发生时间：由从起始顶点出发的最长路径决定（直到入度变为0）
	// 先全部赋值为0，刷新取max
	// 同上面的算法，入度变为0，入队（栈），接续刷新
	// 最迟发生时间：从后往前看，允许最长的路径有时间完成
	// 先取期望最迟完工时间，刷新取min
	// 最早发生时间和最迟发生时间完全重合的节点构成的路径，即为关键路径，决定了最迟完成期限
	// 
	//



	return 0;
}